import cv2
import numpy as np

def apply_sobel_edge_detection(image, scale=1, delta=0, ksize=3):
  """
  Applies Sobel edge detection to an image and returns the edge map.

  Args:
      image: The input image as a NumPy array.
      scale: Optional scaling factor for the gradient calculation (default: 1).
      delta: Optional additive constant to the result (default: 0).
      ksize: Size of the Sobel filter kernel (square kernel, default: 3).

  Returns:
      The Sobel edge map as a grayscale image (float32).
  """
  # Convert image to grayscale if necessary
  grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) if len(image.shape) > 2 else image

  # Apply Sobel in x and y directions (separately)
  sobel_x = cv2.Sobel(grayscale_image, cv2.CV_64F, 1, 0, ksize, scale, delta)
  sobel_y = cv2.Sobel(grayscale_image, cv2.CV_64F, 0, 1, ksize, scale, delta)

  # Combine gradients using the L2 norm (approximate magnitude)
  sobel_combined = np.sqrt(np.square(sobel_x) + np.square(sobel_y))

  # Convert back to uint8 for visualization
  sobel_combined = np.uint8(sobel_combined / np.max(sobel_combined) * 255)

  return sobel_combined

# Example usage
image = cv2.imread("C:/Users/shree/Downloads/download.jpg")
edge_map = apply_sobel_edge_detection(image.copy())

# Display original and edge-detected images
cv2.imshow("Original Image", image)
cv2.imshow("Sobel Edge Map", edge_map)
cv2.waitKey(0)
cv2.destroyAllWindows()

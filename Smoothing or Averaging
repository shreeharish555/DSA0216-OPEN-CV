import cv2
import numpy as np

def apply_averaging_filter(image, kernel_size):
  """
  Applies an averaging filter to an image for smoothing.

  Args:
      image: The input image as a NumPy array.
      kernel_size: The size of the averaging filter kernel (square kernel).

  Returns:
      The smoothed image as a NumPy array.
  """
  # Ensure kernel size is odd and positive
  if kernel_size % 2 == 0 or kernel_size <= 0:
      raise ValueError("Kernel size must be a positive odd number")

  # Convert image to grayscale (if necessary)
  grayscale_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) if len(image.shape) > 2 else image

  # Define averaging kernel (normalized box filter)
  kernel = np.ones((kernel_size, kernel_size), np.float32) / (kernel_size * kernel_size)

  # Apply filter using convolution
  smoothed_image = cv2.filter2D(grayscale_image, -1, kernel)

  return smoothed_image

# Example usage
image = cv2.imread("C:/Users/shree/Downloads/images.jpg")
smoothed_image = apply_averaging_filter(image.copy(), 3)  # Kernel size 3x3 (adjust value)

# Display original and smoothed images
cv2.imshow("Original Image", image)
cv2.imshow("Smoothed Image", smoothed_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
